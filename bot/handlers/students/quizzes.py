from aiogram import Bot, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InputMediaPhoto, Message

from bot.fsm.student import Quiz
from bot.keyboards.inline_keyboard import AnswerCB, QuizCB, cancel_kb, question_kb
from bot.services.database.repositories.quizzes import QuizRepository
from bot.utils.config import FAIL_PHOTO, MIN_PASS_SCORE, SUCCESS_PHOTO

router = Router()


@router.callback_query(QuizCB.filter())
async def get_quiz(
    callback: CallbackQuery, callback_data: QuizCB, state: FSMContext, db
):
    quiz_repo = QuizRepository(db)

    question = await quiz_repo.get_question(callback_data.topic_id, 0)

    await state.set_state(Quiz.answer)
    await state.update_data(
        message_id=callback.message.message_id,
        correct_answer=question.correct_answer,
        totoal_questions=1,
        correct_questions=0,
        topic_id=callback_data.topic_id,
    )

    await callback.message.edit_text(
        "–†–æ–∑–ø–æ—á–∞–≤—Å—è –º–æ–¥—É–ª—å–Ω–∏–π —Ç–µ—Å—Ç.\n"
        "–¶–µ —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∞–Ω—å –∑ —Ç–µ–º–∏. –ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É!",
        reply_markup=cancel_kb,
    )
    await callback.message.pin()

    await callback.message.answer(
        f"–ü–∏—Ç–∞–Ω–Ω—è: {question.question}",
        reply_markup=await question_kb(answers=question.options),
    )


@router.callback_query(Quiz.answer, AnswerCB.filter())
async def answer_question(
    callback: CallbackQuery, callback_data: AnswerCB, state: FSMContext, bot: Bot, db
):
    quiz_repo = QuizRepository(db)

    data = await state.get_data()
    correct_questions = data.get("correct_questions") + (
        data.get("correct_answer") == callback_data.idx
    )
    totoal_questions = data.get("totoal_questions")
    topic_id = data.get("topic_id")

    question = await quiz_repo.get_question(
        topic_id=topic_id, question_index=totoal_questions
    )

    if not question:
        score = round((correct_questions / totoal_questions) * 100)
        if score >= MIN_PASS_SCORE:
            await quiz_repo.save_student_score(
                student_id=callback.from_user.id, topic_id=topic_id, score=score
            )

            text = f"""
üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞–ª–∏ –º–æ–¥—É–ª—å–Ω–∏–π —Ç–µ—Å—Ç!
üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}% ({correct_questions}/{totoal_questions} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)

–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–≤—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ç–µ–º–∏!"""
            await callback.message.edit_media(
                media=InputMediaPhoto(media=SUCCESS_PHOTO, caption=text),
                reply_markup=None,
            )

        else:
            text = f"""
‚ùå –ù–∞ –∂–∞–ª—å, –º–æ–¥—É–ª—å–Ω–∏–π —Ç–µ—Å—Ç –Ω–µ —Å–∫–ª–∞–¥–µ–Ω–æ
üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}% ({correct_questions}/{totoal_questions} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)
‚ÑπÔ∏è –î–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º {MIN_PASS_SCORE}%

üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª —Ç–µ–º–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑!"""
            await callback.message.edit_media(
                media=InputMediaPhoto(media=FAIL_PHOTO, caption=text), reply_markup=None
            )

        await state.clear()
        await bot.edit_message_reply_markup(
            chat_id=callback.from_user.id,
            message_id=data.get("message_id"),
            reply_markup=None,
        )
        await bot.unpin_all_chat_messages(chat_id=callback.from_user.id)
        return

    await state.update_data(
        correct_answer=question.correct_answer,
        correct_questions=correct_questions,
        totoal_questions=totoal_questions + 1,
    )

    await callback.message.edit_text(
        f"–ü–∏—Ç–∞–Ω–Ω—è: {question.question}",
        reply_markup=await question_kb(answers=question.options),
    )


@router.message(Quiz.answer)
async def except_quiz(message: Message):
    await message.answer("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–∫—ñ–Ω—á—ñ—Ç—å –º–æ–¥—É–ª—å–Ω–∏–π —Ç–µ—Å—Ç")
