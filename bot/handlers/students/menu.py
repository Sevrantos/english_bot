from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from bot.keyboards.inline_keyboard import (
    ClassCB,
    ListComands,
    ProgramCB,
    TopicCB,
    class_kb_generator,
    lessons_kb_generator,
    program_kb,
    quizzes_kb,
    support_kb,
    topics_kb_generator,
)
from bot.services.database.repositories.lessons import LessonRepository
from bot.services.database.repositories.quizzes import QuizRepository
from bot.services.database.repositories.topics import TopicRepository
from bot.utils.config import MIN_PASS_SCORE

router = Router()


@router.message(F.text == "üë®‚Äçüéì–ù–∞–≤—á–∞–Ω–Ω—è")
async def show_programs(message: Message):
    await message.answer(
        """üìö –í—ñ—Ç–∞—î–º–æ —É —Ä–æ–∑–¥—ñ–ª—ñ –Ω–∞–≤—á–∞–Ω–Ω—è!

–û–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É:
‚Ä¢ 5-6 –∫–ª–∞—Å–∏ - –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å
‚Ä¢ 7-9 –∫–ª–∞—Å–∏ - —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
‚Ä¢ 10-11 –∫–ª–∞—Å–∏ - –ø–æ–≥–ª–∏–±–ª–µ–Ω–∏–π —Ä—ñ–≤–µ–Ω—å""",
        reply_markup=program_kb,
    )


@router.callback_query(F.data == "programs")
async def back_programs(callback: CallbackQuery):
    await callback.message.edit_text(
        """üìö –í—ñ—Ç–∞—î–º–æ —É —Ä–æ–∑–¥—ñ–ª—ñ –Ω–∞–≤—á–∞–Ω–Ω—è!

–û–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É:
‚Ä¢ 5-6 –∫–ª–∞—Å–∏ - –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å
‚Ä¢ 7-9 –∫–ª–∞—Å–∏ - —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
‚Ä¢ 10-11 –∫–ª–∞—Å–∏ - –ø–æ–≥–ª–∏–±–ª–µ–Ω–∏–π —Ä—ñ–≤–µ–Ω—å""",
        reply_markup=program_kb,
    )


@router.callback_query(ProgramCB.filter())
async def show_classes(callback: CallbackQuery, callback_data: ProgramCB):
    await callback.message.edit_text(
        f"""üìö –û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è

üéØ –ü—Ä–æ–≥—Ä–∞–º–∞: {callback_data.start_class}-{callback_data.end_class} –∫–ª–∞—Å–∏
‚ÑπÔ∏è –ö–æ–∂–µ–Ω –∫–ª–∞—Å –º—ñ—Å—Ç–∏—Ç—å:
‚Ä¢ –¢–µ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ —É—Ä–æ–∫–∏
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
‚Ä¢ –ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏""",
        reply_markup=await class_kb_generator(
            callback_data.start_class, callback_data.end_class
        ),
    )


@router.callback_query(ClassCB.filter())
async def show_topics(callback: CallbackQuery, callback_data: ClassCB, db):
    topic_repo = TopicRepository(db)

    topics = await topic_repo.get_topics_by_class(callback_data.class_number)

    text = f"""üìö {callback_data.class_number}-–π –∫–ª–∞—Å

–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è. –ö–æ–∂–Ω–∞ —Ç–µ–º–∞ –º—ñ—Å—Ç–∏—Ç—å –¥–µ–∫—ñ–ª—å–∫–∞ —É—Ä–æ–∫—ñ–≤ —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –º–æ–¥—É–ª—å–Ω–∏–º —Ç–µ—Å—Ç–æ–º."""

    await callback.message.edit_text(
        text,
        reply_markup=await topics_kb_generator(
            topics=topics, class_number=callback_data.class_number, cmd=ListComands.open
        ),
    )


@router.callback_query(TopicCB.filter())
async def show_lessons(callback: CallbackQuery, callback_data: TopicCB, db):
    lesson_repo = LessonRepository(db)
    topic_repo = TopicRepository(db)

    lessons = await lesson_repo.get_lessons_by_topic(callback_data.topic_id)
    topic = await topic_repo.get_topic(callback_data.topic_id)

    text = f"""üìò –¢–µ–º–∞: {topic.title}
üìù –û–ø–∏—Å: {topic.description}

–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è:"""

    await callback.message.edit_text(
        text,
        reply_markup=await lessons_kb_generator(
            lessons=lessons,
            class_number=callback_data.class_number,
            topic_id=callback_data.topic_id,
            cmd=ListComands.open,
        ),
    )


@router.message(F.text == "üìù–ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏")
async def show_quizzes(message: Message, db):
    quiz_repo = QuizRepository(db)

    topics = await quiz_repo.get_eligible_topics(message.from_user.id, MIN_PASS_SCORE)

    if not topics:
        await message.answer("–í —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥—É–ª—å–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤")
        return

    await message.answer(
        "–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª—å–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤", reply_markup=await quizzes_kb(topics=topics)
    )


@router.message(F.text == "üôã‚Äç‚ôÇÔ∏è–î–æ–ø–æ–º–æ–≥–∞")
async def show_faq(message: Message, db):
    text = f"""
üìö –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (FAQ)

‚ùì –Ø–∫ –ø—Ä–∞—Ü—é—î –Ω–∞–≤—á–∞–Ω–Ω—è?
- –û–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ –∫–ª–∞—Å
- –í–∏–≤—á–∞–π—Ç–µ —É—Ä–æ–∫–∏ –ø–æ —Ç–µ–º–∞—Ö
- –ü—Ä–æ—Ö–æ–¥—å—Ç–µ —Ç–µ—Å—Ç–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É
- –í—ñ–¥–∫—Ä–∏–≤–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏, —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞–≤—à–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏ –∑ —Ç–µ–º–∏

‚ùì –©–æ —Ç–∞–∫–µ –º–æ–¥—É–ª—å–Ω–∏–π —Ç–µ—Å—Ç?
- –¶–µ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ç–µ—Å—Ç –∑ —É—Å—ñ—î—ó —Ç–µ–º–∏
- –í—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤ –∑ —É—Ä–æ–∫—ñ–≤ —Ç–µ–º–∏ (–º—ñ–Ω—ñ–º—É–º 60%)
- –î–æ–ø–æ–º–∞–≥–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É

‚ùì –Ø–∫—ñ –ø—Ä–æ—Ö—ñ–¥–Ω—ñ –±–∞–ª–∏?
- –¢–µ—Å—Ç–∏ –∑ —É—Ä–æ–∫—ñ–≤: –º—ñ–Ω—ñ–º—É–º {MIN_PASS_SCORE}%
- –ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏: –º—ñ–Ω—ñ–º—É–º {MIN_PASS_SCORE}%

‚ùì –©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞?
- –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"
- –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É
- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —Ä–æ–∑–≥–ª—è–Ω—É—Ç—å —ó—ó —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ

üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É –Ω–∏–∂—á–µ
"""
    await message.answer(text=text, reply_markup=support_kb)
